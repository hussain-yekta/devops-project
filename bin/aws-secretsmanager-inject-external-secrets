#!/bin/bash

set -e

# needed variables region,sharedSecrets

cluster=$(basename $(kubectl config current-context))
environment=$(echo $cluster | cut -f2 -d-)
export AWS_DEFAULT_REGION=us-east-1

if [[ $environment == "prod" ]]; then
        environment=production
fi

account=$(aws sts get-caller-identity --output text --query 'Account')
versionId=$(aws iam list-policy-versions --policy-arn arn:aws:iam::${account}:policy/${crossIamPolicy} --query 'Versions[?IsDefaultVersion==`true`].VersionId' --output text)
externalSecretArns=$(aws iam get-policy-version --policy-arn arn:aws:iam::${account}:policy/${crossIamPolicy} --version-id $versionId --query 'PolicyVersion.Document.Statement[*].Resource' --output text \
	| tr -s '[:blank:]' "\n" | grep 'arn:aws:secretsmanager')

for secretArn in $(echo "$externalSecretArns"); do
	secretName=$(echo $secretArn | cut -f7 -d':' | rev | cut -f2- -d'-' | rev)
	# TODO: remove run
	value=$($kubectl run -i awscli-pod --image=atlassian/pipelines-awscli --restart=Never --rm --quiet -- secretsmanager get-secret-value --secret-id $secretArn --region $region --version-stage AWSCURRENT 2> /dev/null \
		| jq --raw-output '.SecretString' | jq -r 'to_entries[] | "  \(.key): \(.value | @base64)"')
	((cat kubernetes/secrets.yml | sed "s/SERVICE_NAME/${service}/g; s/SECRET_NAME/${secretName}/g;") && echo "${value}") | $kubectl apply -f -
done

exit 0
